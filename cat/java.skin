language Java

alias function func fun
alias method meth function fun member_function
alias member element
alias field variable var
alias var local_variable variable
alias binary binary_operator binary_op bin_op bin
alias unary unary_operator unary_op un_op un
alias array list
alias list sequence seq
alias sequence seq
alias goal compilation_unit program root start file source source_file
alias add plus additive addition sum
alias sub minus subtraction
alias mul times multiplicative multiplication product
alias div divide division
alias mod rem remainder modulus
alias shl lshift left_shift left_bit_shift
alias shr rshift right_shift right_bit_shift
alias ushr urshift unsigned_right_shift unsigned_right_bit_shift
alias and andand boolean_and conditional_and short_circuit_and short_cut_and shortcut_and
alias or oror boolean_or conditional_or short_circuit_or short_cut_or shortcut_or
alias not complement logical_not bitwise_not bit_not bitnot
alias and bitand bit_and bitwise_and logical_and
alias or bitor bit_or bitwise_or logical_or
alias xor bitxor bit_xor bitwise_xor logical_xor
alias null nil null_lit
alias char character char_lit character_lit
alias int integer number decimal int_lit
alias float floating_point float_lit floating_point_lit number real single
alias double double_float double_lit number real float floating_point float_lit floating_point_lit
alias class klass clazz
alias primitive prim
alias interface iface
alias literal lit value val
alias bool boolean bool_lit boolean_lit
alias expression exp
alias statement stm stmt cmd command
alias left_hand_side lhs lvalue
alias right_hand_side rhs rvalue
alias assign gets eq equals equal assignment
alias eq eqeq eq_eq equals equal is_equal
alias le lte lteq lt_eq less_than_or_equals less_than_equals less_equals
alias ge gte gteq gt_eq greater_than_or_equals greater_than_equals greater_equals
alias lt less_than less
alias gt greater_than greater
alias ne neq noteq not_eq not_equals disequal unequal nonequal not_equal
alias dimensions dims
alias dimension dim
alias modifier mod flag
alias lazy on_demand
alias variable var name
alias identifier ident id name
alias parameter param variable local_variable argument
alias actual argument
alias formal formal_parameter
alias if if_then if_then_else cond conditional
alias cond conditional
alias declaration decl definition def

ast

data EXPRESSION = IntLit int
        | LongLit long
        | DoubleLit double
        | FloatLit float
        | BooleanLit boolean
        | CharLit char
        | StringLit String
        | NullLit
        | This (Maybe TYPE)
        | ClassLit TYPE
        | New TYPE [EXPRESSION] (Maybe CLASS_BODY)
        | QualifiedNew EXPRESSION IDENTIFIER [EXPRESSION] (Maybe CLASS_BODY)
        | NewArray TYPE [EXPRESSION] DIMENSIONS (Maybe EXPRESSION)
        | Field EXPRESSION IDENTIFIER
        | StaticField TYPE IDENTIFIER
        | Super (Maybe TYPE)
        | Call (Maybe EXPRESSION) IDENTIFIER [EXPRESSION]
        | StaticCall TYPE IDENTIFIER [EXPRESSION]
        | ArrayAccess EXPRESSION EXPRESSION
        | PostIncrement EXPRESSION
        | PostDecrement EXPRESSION
        | PreIncrement EXPRESSION
        | PreDecrement EXPRESSION
        | UnaryPlus EXPRESSION
        | UnaryMinus EXPRESSION
        | BitNot EXPRESSION
        | LogicalNot EXPRESSION
        | Cast TYPE EXPRESSION
        | Mul EXPRESSION EXPRESSION
        | Div EXPRESSION EXPRESSION
        | Mod EXPRESSION EXPRESSION
        | Add EXPRESSION EXPRESSION
        | Sub EXPRESSION EXPRESSION
        | Shl EXPRESSION EXPRESSION
        | Shr EXPRESSION EXPRESSION
        | UShr EXPRESSION EXPRESSION
        | Less EXPRESSION EXPRESSION
        | Greater EXPRESSION EXPRESSION
        | LessEqual EXPRESSION EXPRESSION
        | GreaterEqual EXPRESSION EXPRESSION
        | InstanceOf EXPRESSION TYPE
        | Equals EXPRESSION EXPRESSION
        | NotEquals EXPRESSION EXPRESSION
        | BitAnd EXPRESSION EXPRESSION
        | BitXor EXPRESSION EXPRESSION
        | BitOr EXPRESSION EXPRESSION
        | CondAnd EXPRESSION EXPRESSION
        | CondOr EXPRESSION EXPRESSION
        | Conditional EXPRESSION EXPRESSION EXPRESSION
        | Assign EXPRESSION EXPRESSION
        | MulAssign EXPRESSION EXPRESSION
        | DivAssign EXPRESSION EXPRESSION
        | ModAssign EXPRESSION EXPRESSION
        | AddAssign EXPRESSION EXPRESSION
        | SubAssign EXPRESSION EXPRESSION
        | ShlAssign EXPRESSION EXPRESSION
        | ShrAssign EXPRESSION EXPRESSION
        | UShrAssign EXPRESSION EXPRESSION
        | AndAssign EXPRESSION EXPRESSION
        | XorAssign EXPRESSION EXPRESSION
        | OrAssign EXPRESSION EXPRESSION
        | ArrayInit [EXPRESSION]
        | Var IDENTIFIER

data TYPE = BooleanType
        | ByteType
        | CharType
        | ShortType
        | IntType
        | LongType
        | FloatType
        | DoubleType
        | NameType NAME
        | ArrayType TYPE
        | VoidType

data DIMENSIONS = Zero | Succ DIMENSIONS

data NAME = Name (Maybe NAME) IDENTIFIER
          | NameFromList [IDENTIFIER]

data IDENTIFIER = Identifier String

data SOURCE = Source (Maybe PACKAGE) [IMPORT] [DECLARATION]

data PACKAGE = Package NAME

data IMPORT = SingleImport NAME | OnDemandImport NAME

data MODIFIER = PublicModifier
        | ProtectedModifier
        | PrivateModifier
        | StaticModifier
        | AbstractModifier
        | FinalModifier
        | NativeModifier
        | SynchronizedModifier
        | TransientModifier
        | VolatileModifier
        | StrictFPModifier

data DECLARATION = ClassDecl [MODIFIER] IDENTIFIER (Maybe TYPE) [TYPE] CLASS_BODY
        | InterfaceDecl [MODIFIER] IDENTIFIER [TYPE] CLASS_BODY
        | Initializer [MODIFIER] STATEMENT
        | FieldDecl [MODIFIER] TYPE [VARIABLE_DECLARATOR]
        | MethodDecl [MODIFIER] TYPE DIMENSIONS IDENTIFIER [FORMAL] [TYPE] (Maybe STATEMENT)
        | ConstructorDecl [MODIFIER] IDENTIFIER [FORMAL] [TYPE] (Maybe STATEMENT)

data VARIABLE_DECLARATOR = VariableDeclarator IDENTIFIER DIMENSIONS (Maybe EXPRESSION)

data CLASS_BODY = ClassBody [DECLARATION]

data FORMAL = Formal [MODIFIER] TYPE IDENTIFIER DIMENSIONS

data CATCH = Catch FORMAL STATEMENT

data STATEMENT =
    ThisCall (Maybe EXPRESSION) [EXPRESSION]
  | SuperCall (Maybe EXPRESSION) [EXPRESSION]
  | Block [STATEMENT]
  | LocalClassDecl DECLARATION
  | LocalDecl [MODIFIER] TYPE [VARIABLE_DECLARATOR]
  | EmptyStm
  | Labeled IDENTIFIER STATEMENT
  | EvalStm EXPRESSION
  | IfThen EXPRESSION STATEMENT
  | IfThenElse EXPRESSION STATEMENT STATEMENT
  | Switch EXPRESSION [STATEMENT]
  | Case (Maybe EXPRESSION)
  | While EXPRESSION STATEMENT
  | Do STATEMENT EXPRESSION
  | For [STATEMENT] (Maybe EXPRESSION) [STATEMENT] STATEMENT
  | Break (Maybe IDENTIFIER)
  | Continue (Maybe IDENTIFIER)
  | Return (Maybe EXPRESSION)
  | Throw EXPRESSION
  | Synchronized EXPRESSION STATEMENT
  | Try STATEMENT [CATCH] (Maybe STATEMENT)
  | Assert EXPRESSION (Maybe EXPRESSION)

token String IDENTIFIER
token int INT_LITERAL
token long LONG_LITERAL
token float FLOAT_LITERAL
token double DOUBLE_LITERAL
token char CHAR_LITERAL
token String STRING_LITERAL



template TYPE -> TYPE ::= "<" type:a ">" { a };
template TYPE -> [TYPE] ::= "<" types:a ">" { a };
template TYPE -> EXPRESSION ::= "(" expression:a ")" { a };
template TYPE -> [EXPRESSION] ::= "(" argument_list_opt:a ")" { a };

template EXPRESSION -> TYPE ::= "<" type:a ">" { a };
template EXPRESSION -> [TYPE] ::= "<" types:a ">" { a };
template EXPRESSION -> EXPRESSION ::= expression:a { a };
template EXPRESSION -> [EXPRESSION] ::= "(" argument_list_opt:a ")" { a };

template STATEMENT -> TYPE ::= "<" type:a ">" { a };
template STATEMENT -> [TYPE] ::= "<" types:a ">" { a };
template STATEMENT -> EXPRESSION ::= "(" expression:a ")" { a };
template STATEMENT -> [EXPRESSION] ::= "(" argument_list_opt:a ")" { a };
template STATEMENT -> [STATEMENT] ::= "{" block_statements:a "}" { a };
template STATEMENT -> STATEMENT ::= statement:a { a };

-- template Object -> [A] ::= "(" object_list:a ")" { a };

-- STATEMENT ::= ... ";" if last child not STATEMENT
-- keyword at the beginning
-- no nonterminals juxtaposed

grammar

SOURCE goal ::=
        compilation_unit:a
            { a }
    ;


TYPE type ::=
        primitive_type:a
            { a }
    |   reference_type:a
            { a }
    ;
TYPE primitive_type ::=
        numeric_type:a
            { a }
    |   "boolean"
            { BooleanType }
    |   "void"
            { VoidType }
    ;
TYPE numeric_type::=
        integral_type:a
            { a }
    |   floating_point_type:a
            { a }
    ;
TYPE integral_type ::=
        "byte"
            { ByteType }
    |   "char"
            { CharType }
    |   "short"
            { ShortType }
    |   "int"
            { IntType }
    |   "long"
            { LongType }
    ;
TYPE floating_point_type ::=
        "float"
            { FloatType }
    |   "double"
            { DoubleType }
    ;
TYPE reference_type ::=
        name_type:a
            { a }
    |   array_type:a
            { a }
    ;
TYPE name_type ::=
        name:a
            { NameType a }
    ;
TYPE array_type ::=
        type:a dim
            { ArrayType a }
    ;
NAME name    ::=
        simple_name:a
            { a }
    |   qualified_name:a
            { a }
    ;
NAME simple_name ::=
        ident:a
            { Name Nothing a }
    |   ident:a
            { NameFromList [a] }
    ;
NAME qualified_name ::=
        name:a "." ident:b
            { Name (Just a) b }
    |   ident:a "." ident_list:b
            { NameFromList (a:b) }
    ;
[IDENTIFIER] ident_list ::=
        ident:a
            { [a] }
    |   ident:a ident_list:b
            { a : b }
    ;
SOURCE compilation_unit ::=
        package_declaration_opt:a
        import_declarations_opt:b
        declarations_opt:c
            { Source a b c }
        ;
(Maybe PACKAGE) package_declaration_opt ::=
        package_declaration:a
            { Just a }
    |
            { Nothing }
    ;
PACKAGE package_declaration ::=
        "package" name:a ";"
            { Package a }
    ;
[IMPORT] import_declarations_opt ::=
        import_declarations:a
            { a }
    |
            { [] }
    ;
[IMPORT] import_declarations ::=
        import_declaration:a
            { [a] }
    |   import_declaration:a import_declarations:b
            { a : b }
    ;
IMPORT import_declaration ::=
        single_type_import_declaration:a
            { a }
    |   type_import_on_demand_declaration:a
            { a }
    ;
IMPORT single_type_import_declaration ::=
        "import" qualified_name:b ";"
            { SingleImport b }
    ;
IMPORT type_import_on_demand_declaration ::=
        "import" name:b "." "*" ";"
            { OnDemandImport b }
    ;
[DECLARATION] declarations_opt   ::=
        declarations:a
            { a }
    |
            { [] }
    ;
[DECLARATION] declarations ::=
        declaration:a
            { [a] }
    |   declaration:a declarations:b
            { a : b }
    |   ";"
            { [] }
    |   ";" declarations:b
            { b }
    ;
DECLARATION declaration ::=
        type_declaration:a
            { a }
    |   class_body_declaration:a
            { a }
    ;
DECLARATION type_declaration ::=
        class_declaration:a
            { a }
    |   interface_declaration:a
            { a }
    ;
[MODIFIER] modifiers_opt::=
            { [] }
    |   modifiers:a
            { a }
    ;
[MODIFIER] modifiers ::=
        modifier:a
            { [a] }
    |   modifier:a modifiers:b
            { a : b }
    ;
MODIFIER modifier ::=
        "public"
            { PublicModifier }
    |   "protected"
            { ProtectedModifier }
    |   "private"
            { PrivateModifier }
    |   "static"
            { StaticModifier }
    |   "abstract"
            { AbstractModifier }
    |   "final"
            { FinalModifier }
    |   "native"
            { NativeModifier }
    |   "synchronized"
            { SynchronizedModifier }
    |   "transient"
            { TransientModifier }
    |   "volatile"
            { VolatileModifier }
    |   "strictfp"
            { StrictFPModifier }
    ;
DECLARATION class_declaration ::=
        modifiers_opt:a "class" ident:b
                super_opt:c interfaces_opt:d class_body:e
            { ClassDecl a b c d e }
    ;
TYPE super ::=
        "extends" name_type:a
            { a }
    ;
(Maybe TYPE) super_opt ::=
            { Nothing }
    |   super:a
            { Just a }
    ;
[TYPE] interfaces ::=
        "implements" types:a
            { a }
    ;
[TYPE] interfaces_opt ::=
            { [] }
    |   interfaces:a
            { a }
    ;
CLASS_BODY class_body ::=
        "{" class_body_declarations_opt:a "}"
            { ClassBody a }
    ;
[DECLARATION] class_body_declarations_opt ::=
            { [] }
    |   class_body_declarations:a
            { a }
    ;
[DECLARATION] class_body_declarations ::=
        ";"
            { [] }
    |   class_body_declaration:a
            { [a] }
    |   ";" class_body_declarations:b
            { b }
    |   class_body_declaration:a class_body_declarations:b
            { a : b }
    ;
DECLARATION class_body_declaration ::=
        class_member_declaration:a
            { a }
    |   constructor_declaration:a
            { a }
    |   block:a
            { Initializer [] a }
    |   "static" block:a
            { Initializer [StaticModifier] a }
    ;
DECLARATION class_member_declaration ::=
        field_declaration:a
            { a }
    |   method_declaration:a
            { a }
    |   class_declaration:a
            { a }
    |   interface_declaration:a
            { a }
    ;
DECLARATION field_declaration ::=
        modifiers_opt:a type:b variable_declarators:c ";"
            { FieldDecl a b c }
    ;
[VARIABLE_DECLARATOR] variable_declarators ::=
        variable_declarator:a
            { [a] }
    |   variable_declarator:a "," variable_declarators:b
            { a : b }
    ;
VARIABLE_DECLARATOR variable_declarator ::=
        ident:a dims_opt:b
            { VariableDeclarator a b Nothing }
    |   ident:a dims_opt:b EQ variable_initializer:c
            { VariableDeclarator a b (Just c) }
    ;
EXPRESSION expression ::=
        assignment_expression:a
            { a }
    ;
EXPRESSION variable_initializer ::=
        expression:a
            { a }
    |   array_initializer:a
            { a }
    ;
DECLARATION method_declaration ::=
        modifiers_opt:a type:b ident:c "("
                formal_parameter_list_opt:d ")" dims_opt:e throws_opt:f
                        method_body:g
            { MethodDecl a b e c d f g }
    ;
[FORMAL] formal_parameter_list_opt ::=
            { [] }
    |   formal_parameter_list:a
            { a }
    ;
[FORMAL] formal_parameter_list ::=
        formal_parameter:a
            { [a] }
    |   formal_parameter:a "," formal_parameter_list:b
            { a : b }
    ;
FORMAL formal_parameter ::=
        type:a ident:b dims_opt:c
            { Formal [] a b c }
    |   "final" type:a ident:b dims_opt:c
            { Formal [FinalModifier] a b c }
    ;
[TYPE] throws_opt ::=
            { [] }
    |   throws:a
            { a }
    ;
[TYPE] throws ::=
        "throws" types:a
            { a }
    ;
[TYPE] types ::=
        type:a
            { [a] }
    |   type:a "," types:b
            { a : b }
    ;
(Maybe STATEMENT) method_body ::=
        block:a
            { Just a }
    |   ";"
            { Nothing }
    ;
DECLARATION constructor_declaration ::=
        modifiers_opt:m ident:a "(" formal_parameter_list_opt:b ")"
            throws_opt:c constructor_body_opt:d
            { ConstructorDecl m a b c d }
    ;
(Maybe STATEMENT) constructor_body_opt ::=
        constructor_body:a
            { Just a }
    |   ";"
            { Nothing }
    ;
STATEMENT statement ::=
        block:a
            { a }
    |   empty_statement:a
            { a }
    |   expression_statement:a
            { a }
    |   switch_statement:a
            { a }
    |   do_statement:a
            { a }
    |   break_statement:a
            { a }
    |   continue_statement:a
            { a }
    |   return_statement:a
            { a }
    |   synchronized_statement:a
            { a }
    |   throw_statement:a
            { a }
    |   try_statement:a
            { a }
    |   assert_statement:a
            { a }
    |   labeled_statement:a
            { a }
    |   if_then_statement:a
            { a }
    |   if_then_else_statement:a
            { a }
    |   while_statement:a
            { a }
    |   for_statement:a
            { a }
    ;
STATEMENT constructor_body ::=
        "{" explicit_constructor_invocation:a block_statements:b "}"
            { Block (a : b) }
    |   "{" explicit_constructor_invocation:a "}"
            { Block [a] }
    |   "{" block_statements:a "}"
            { Block a }
    |   "{" "}"
            { Block [] }
    ;
STATEMENT explicit_constructor_invocation ::=
        "this" "(" argument_list_opt:b ")" ";"
            { ThisCall Nothing b }
    |   "super" "(" argument_list_opt:b ")" ";"
            { SuperCall Nothing b }
    |   primary:a "." "this" "(" argument_list_opt:b ")" ";"
            { ThisCall (Just a) b }
    |   primary:a "." "super" "(" argument_list_opt:b ")" ";"
            { SuperCall (Just a) b }
    ;
DECLARATION interface_declaration ::=
        modifiers_opt:a "interface" ident:b
                extends_interfaces_opt:c class_body:d
            { InterfaceDecl a b c d }
    ;
[TYPE] extends_interfaces_opt ::=
            { [] }
    |   extends_interfaces:a
            { a }
    ;
[TYPE] extends_interfaces ::=
        "extends" types:a
            { a }
    ;
EXPRESSION array_initializer ::=
        "{" variable_initializers:a "," "}"
            { ArrayInit a }
    |   "{" variable_initializers:a "}"
            { ArrayInit a }
    |   "{" "," "}"
            { ArrayInit [] }
    |   "{" "}"
            { ArrayInit [] }
    ;
[EXPRESSION] variable_initializers ::=
        variable_initializer:a
            { [a] }
    |   variable_initializer:a "," variable_initializers:b
            { a : b }
    ;
STATEMENT block ::=
        "{" block_statements_opt:a "}"
            { Block a }
    ;
[STATEMENT] block_statements_opt ::=
            { [] }
    |   block_statements:a
            { a }
    ;
[STATEMENT] block_statements ::=
        block_statement:a
            { [a] }
    |   block_statement:a block_statements:b
            { a : b }
    ;
STATEMENT block_statement ::=
        local_variable_declaration_statement:a
            { a }
    |   statement:a
            { a }
    |   class_declaration:a
            { LocalClassDecl a }
    ;
STATEMENT local_variable_declaration_statement ::=
        local_variable_declaration:a ";"
            { a }
    ;
STATEMENT local_variable_declaration ::=
        type:a variable_declarators:b
            { LocalDecl [] a b }
    |   "final" type:a variable_declarators:b
            { LocalDecl [FinalModifier] a b }
    ;
STATEMENT empty_statement ::=
        ";"
            { EmptyStm }
    ;
STATEMENT labeled_statement ::=
        ident:a ":" statement:b
            { Labeled a b }
    ;
STATEMENT expression_statement ::=
        expression:a ";"
            { EvalStm a }
    ;
STATEMENT if_then_statement ::=
        "if" "(" expression:a ")" statement:b
            { IfThen a b }
    ;
STATEMENT if_then_else_statement ::=
        "if" "(" expression:a ")" statement:b "else" statement:c
            { IfThenElse a b c }
    ;
STATEMENT switch_statement ::=
        "switch" "(" expression:a ")" switch_block:b
            { Switch a b }
    ;
[STATEMENT] switch_block ::=
        "{" switch_block_statement_groups:a switch_labels:b "}"
            { a ++ b }
    |   "{" switch_block_statement_groups:a "}"
            { a }
    |   "{" switch_labels:a "}"
            { a }
    |   "{" "}"
            { [] }
    ;
[STATEMENT] switch_block_statement_groups ::=
        switch_block_statement_group:a
            { a }
    |   switch_block_statement_groups:a switch_block_statement_group:b
            { a ++ b }
    ;
[STATEMENT] switch_block_statement_group ::=
        switch_labels:a block_statements:b
            { a ++ b }
    ;
[STATEMENT] switch_labels ::=
        switch_label:a
            { [a] }
    |   switch_labels:a switch_label:b
            { a ++ [b] }
    ;
STATEMENT switch_label ::=
        "case" expression:a ":"
            { Case (Just a) }
    |   "default" ":"
            { Case Nothing }
    ;
STATEMENT while_statement ::=
        "while" "(" expression:a ")" statement:b
            { While a b }
    ;
STATEMENT do_statement ::=
        "do" statement:a "while" "(" expression:b ")" ";"
            { Do a b }
    ;
STATEMENT for_statement ::=
        "for" "(" for_init_opt:a ";" expression_opt:b ";"
            for_update_opt:c ")" statement:d
            { For a b c d }
    ;
[STATEMENT] for_init_opt ::=
            { [] }
    |   for_init:a
            { a }
    ;
[STATEMENT] for_init ::=
        statement_expression_list:a
            { a }
    |   local_variable_declaration:a
            { [a] }
    ;
[STATEMENT] for_update_opt ::=
            { [] }
    |   for_update:a
            { a }
    ;
[STATEMENT] for_update ::=
        statement_expression_list:a
            { a }
    ;
[STATEMENT] statement_expression_list ::=
        expression:a
            { [EvalStm a] }
    |   expression:a "," statement_expression_list:b
            { (EvalStm a) : b }
    ;
(Maybe IDENTIFIER) identifier_opt ::=
            { Nothing }
    |   ident:a
            { Just a }
    ;
STATEMENT break_statement ::=
        "break" identifier_opt:a ";"
            { Break a }
    ;
STATEMENT continue_statement ::=
        "continue" identifier_opt:a ";"
            { Continue a }
    ;
STATEMENT return_statement ::=
        "return" expression_opt:a ";"
            { Return a }
    ;
STATEMENT throw_statement ::=
        "throw" expression:a ";"
            { Throw a }
    ;
STATEMENT synchronized_statement ::=
        "synchronized" "(" expression:a ")" block:b
            { Synchronized a b }
    ;
STATEMENT try_statement ::=
        "try" block:a catches:b
            { Try a b Nothing }
    |   "try" block:a catches_opt:b finally:c
            { Try a b (Just c) }
    ;
[CATCH] catches_opt ::=
            { [] }
    |   catches:a
            { a }
    ;
[CATCH] catches ::=
        catch_clause:a
            { [a] }
    |   catch_clause:a catches:b
            { a : b }
    ;
CATCH catch_clause ::=
        "catch" "(" formal_parameter:a ")" block:b
            { Catch a b }
    ;
STATEMENT finally ::=
        "finally" block:a
            { a }
    ;
STATEMENT assert_statement ::=
        "assert" expression:a ";"
                { Assert a Nothing }
    |   "assert" expression:a ":" expression:b ";"
                { Assert a (Just b) }
    ;
EXPRESSION literal ::=
        INT_LITERAL:a
            { IntLit a }
    |   LONG_LITERAL:a
            { LongLit a }
    |   DOUBLE_LITERAL:a
            { DoubleLit a }
    |   FLOAT_LITERAL:a
            { FloatLit a }
    |   "true"
            { BooleanLit True }
    |   "false"
            { BooleanLit False }
    |   CHAR_LITERAL:a
            { CharLit a }
    |   STRING_LITERAL:a
            { StringLit a }
    |   "null"
            { NullLit }
    ;
EXPRESSION primary ::=
        literal:a
            { a }
    |   name_expr:a
            { a }
    |   "this"
            { This Nothing }
    |   type:a "." "this"
            { This (Just a) }
    |   "(" expression:a ")"
            { a }
    |   class_instance_creation_expression:a
            { a }
    |   field_access:a
            { a }
    |   method_invocation:a
            { a }
    |   array_access:a
            { a }
    |   type:a "." "class"
            { ClassLit a }
    |   array_creation_expression:a
            { a }
    ;
EXPRESSION class_instance_creation_expression ::=
        "new" name_type:a "(" argument_list_opt:b ")"
            { New a b Nothing }
    |   "new" name_type:a "(" argument_list_opt:b ")" class_body:c
            { New a b (Just c) }
    |   primary:a "." "new" ident:b "(" argument_list_opt:c ")"
            { QualifiedNew a b c Nothing }
    |   primary:a "." "new" ident:b "(" argument_list_opt:c ")" class_body:d
            { QualifiedNew a b c (Just d) }
    ;
[EXPRESSION] argument_list_opt ::=
            { [] }
    |   argument_list:a
            { a }
    ;
[EXPRESSION] argument_list ::=
        expression:a
            { [a] }
    |   expression:a "," argument_list:b
            { a : b }
    ;
EXPRESSION array_creation_expression ::=
        "new" primitive_type:a dim_exprs:b dims_opt:c
            { NewArray a b c Nothing }
    |   "new" name_type:a dim_exprs:b dims_opt:c
            { NewArray a b c Nothing }
    |   "new" primitive_type:a dims:b array_initializer:c
            { NewArray a [] b (Just c) }
    |   "new" name_type:a dims:b array_initializer:c
            { NewArray a [] b (Just c) }
    ;
[EXPRESSION] dim_exprs ::=
        dim_expr:a
            { [a] }
    |   dim_expr:a dim_exprs:b
            { a : b }
    ;
EXPRESSION dim_expr ::=
        "[" expression:a "]"
            { a }
    ;
DIMENSIONS dims_opt ::=
            { Zero }
    |   dims:a
            { a }
    ;
DIMENSIONS dims ::=
        "[" "]"
            { Succ Zero }
    |   dims:a "[" "]"
            { Succ a }
    ;
EXPRESSION field_access ::=
        primary:a "." ident:b
            { Field a b }
    |   "super" "." ident:a
            { Field (Super Nothing) a }
    |   name_type:a "." "super" "." ident:b
            { Field (Super (Just a)) b }
    ;
EXPRESSION method_invocation ::=
        ident:a "(" argument_list_opt:b ")"
            { Call Nothing a b }
    |   primary:a "." ident:b "(" argument_list_opt:c ")"
            { Call (Just a) b c }
    |   "super" "." ident:b "(" argument_list_opt:c ")"
            { Call (Just (Super Nothing)) b c }
    |   name_type:a "." "super" "." ident:b "(" argument_list_opt:c ")"
            { Call (Just (Super (Just a))) b c }
    ;
EXPRESSION array_access ::=
        primary:a "[" expression:b "]"
            { ArrayAccess a b }
    ;
EXPRESSION postfix_expression ::=
        primary:a
            { a }
    |   postincrement_expression:a
            { a }
    |   postdecrement_expression:a
            { a }
    ;
EXPRESSION postincrement_expression ::=
        postfix_expression:a "++"
            { PostIncrement a }
    ;
EXPRESSION postdecrement_expression ::=
        postfix_expression:a "--"
            { PostDecrement a }
    ;
EXPRESSION unary_expression ::=
        preincrement_expression:a
            { a }
    |   predecrement_expression:a
            { a }
    |   "+" unary_expression:a
            { UnaryPlus a }
    |   "-" unary_expression:a
            { UnaryMinus a }
    |   unary_expression_not_plus_minus:a
            { a }
    ;
EXPRESSION preincrement_expression ::=
        "++" unary_expression:a
            { PreIncrement a }
    ;
EXPRESSION predecrement_expression ::=
        "--" unary_expression:a
            { PreDecrement a }
    ;
EXPRESSION unary_expression_not_plus_minus ::=
        postfix_expression:a
            { a }
    |   "~" unary_expression:a
            { BitNot a }
    |   "!" unary_expression:a
            { LogicalNot a }
    |   cast_expression:a
            { a }
    ;
EXPRESSION cast_expression ::=
        "(" type:a ")" unary_expression:c
            { Cast a c }
    ;
EXPRESSION multiplicative_expression ::=
        unary_expression:a
            { a }
    |   multiplicative_expression:a "*" unary_expression:b
            { Mul a b }
    |   multiplicative_expression:a "/" unary_expression:b
            { Div a b }
    |   multiplicative_expression:a "%" unary_expression:b
            { Mod a b }
    ;
EXPRESSION additive_expression ::=
        multiplicative_expression:a
            { a }
    |   additive_expression:a "+" multiplicative_expression:b
            { Add a b }
    |   additive_expression:a "-" multiplicative_expression:b
            { Sub a b }
    ;
EXPRESSION shift_expression ::=
        additive_expression:a
            { a }
    |   shift_expression:a "<<" additive_expression:b
            { Shl a b }
    |   shift_expression:a ">>" additive_expression:b
            { Shr a b }
    |   shift_expression:a ">>>" additive_expression:b
            { UShr a b }
    ;
EXPRESSION relational_expression ::=
        shift_expression:a
            { a }
    |   relational_expression:a "<" shift_expression:b
            { Less a b }
    |   relational_expression:a ">" shift_expression:b
            { Greater a b }
    |   relational_expression:a "<=" shift_expression:b
            { LessEqual a b }
    |   relational_expression:a ">=" shift_expression:b
            { GreaterEqual a b }
    |   relational_expression:a "instanceof" reference_type:b
            { InstanceOf a b }
    ;
EXPRESSION equality_expression ::=
        relational_expression:a
            { a }
    |   equality_expression:a "==" relational_expression:b
            { Equals a b }
    |   equality_expression:a "!=" relational_expression:b
            { NotEquals a b }
    ;
EXPRESSION and_expression ::=
        equality_expression:a
            { a }
    |   and_expression:a "&" equality_expression:b
            { BitAnd a b }
    ;
EXPRESSION exclusive_or_expression ::=
        and_expression:a
            { a }
    |   exclusive_or_expression:a "^" and_expression:b
            { BitXor a b }
    ;
EXPRESSION inclusive_or_expression ::=
        exclusive_or_expression:a
            { a }
    |   inclusive_or_expression:a "|" exclusive_or_expression:b
            { BitOr a b }
    ;
EXPRESSION conditional_and_expression ::=
        inclusive_or_expression:a
            { a }
    |   conditional_and_expression:a "&&" inclusive_or_expression:b
            { CondAnd a b }
    ;
EXPRESSION conditional_or_expression ::=
        conditional_and_expression:a
            { a }
    |   conditional_or_expression:a "||" conditional_and_expression:b
            { CondOr a b }
    ;
EXPRESSION conditional_expression ::=
        conditional_or_expression:a
            { a }
    |   conditional_or_expression:a "?" expression:b ":" conditional_expression:c
            { Conditional a b c }
    ;
EXPRESSION assignment_expression ::=
        conditional_expression:a
            { a }
    |   assignment:a
            { a }
    ;
EXPRESSION assignment ::=
        left_hand_side:a "=" assignment_expression:c
            { Assign a c }
    |   left_hand_side:a "*=" assignment_expression:c
            { MulAssign a c }
    |   left_hand_side:a "/=" assignment_expression:c
            { DivAssign a c }
    |   left_hand_side:a "%=" assignment_expression:c
            { ModAssign a c }
    |   left_hand_side:a "+=" assignment_expression:c
            { AddAssign a c }
    |   left_hand_side:a "-=" assignment_expression:c
            { SubAssign a c }
    |   left_hand_side:a "<<=" assignment_expression:c
            { ShlAssign a c }
    |   left_hand_side:a ">>=" assignment_expression:c
            { ShrAssign a c }
    |   left_hand_side:a ">>>=" assignment_expression:c
            { UShrAssign a c }
    |   left_hand_side:a "&=" assignment_expression:c
            { AndAssign a c }
    |   left_hand_side:a "^=" assignment_expression:c
            { XorAssign a c }
    |   left_hand_side:a "|=" assignment_expression:c
            { OrAssign a c }
    ;
EXPRESSION name_expr ::=
        ident:a
            { Var a }
    ;
EXPRESSION left_hand_side ::=
        name_expr:a
            { a }
    |   field_access:a
            { a }
    |   array_access:a
            { a }
    ;
(Maybe EXPRESSION) expression_opt ::=
            { Nothing }
    |   expression:a
            { Just a }
    ;
IDENTIFIER ident ::=
        IDENTIFIER:a
            { Identifier a }
    ;
