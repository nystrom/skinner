language Ruby

alias seq sequence
alias skip empty void unit
alias exponent power pow expt 
alias function func fun
alias method meth function fun member_function
alias member element
alias field variable var
alias var local_variable variable
alias binary binary_operator binary_op bin_op bin
alias unary unary_operator unary_op un_op un
alias array list
alias list sequence seq
alias sequence seq
alias goal compilation_unit program root start file source source_file
alias add plus additive addition sum
alias sub minus subtraction
alias mul times multiplicative multiplication product
alias div divide division
alias mod rem remainder modulus
alias shl lshift left_shift left_bit_shift
alias shr rshift right_shift right_bit_shift
alias ushr urshift unsigned_right_shift unsigned_right_bit_shift
alias and andand boolean_and conditional_and short_circuit_and short_cut_and shortcut_and
alias or oror boolean_or conditional_or short_circuit_or short_cut_or shortcut_or
alias not complement logical_not bitwise_not bit_not bitnot
alias and bitand bit_and bitwise_and logical_and
alias or bitor bit_or bitwise_or logical_or
alias xor bitxor bit_xor bitwise_xor logical_xor
alias null nil null_lit
alias char character char_lit character_lit
alias int integer number decimal int_lit
alias float floating_point float_lit floating_point_lit number real single
alias double double_float double_lit number real float floating_point float_lit floating_point_lit
alias class klass clazz
alias primitive prim
alias interface iface
alias literal lit value val
alias bool boolean bool_lit boolean_lit
alias expression exp
alias statement stm stmt cmd command
alias left_hand_side lhs lvalue
alias right_hand_side rhs rvalue
alias assign gets eq equals equal assignment
alias eq eqeq eq_eq equals equal is_equal
alias le lte lteq lt_eq less_than_or_equals less_than_equals less_equals
alias ge gte gteq gt_eq greater_than_or_equals greater_than_equals greater_equals
alias lt less_than less
alias gt greater_than greater
alias ne neq noteq not_eq not_equals disequal unequal nonequal not_equal
alias dimensions dims
alias dimension dim
alias modifier mod flag
alias lazy on_demand
alias variable var name
alias identifier ident id name
alias parameter param variable local_variable argument
alias actual argument
alias formal formal_parameter
alias if if_then if_then_else cond conditional
alias cond conditional
alias declaration decl definition def statement

ast

data PROGRAM
        = ProgramDeclarations [DECLARATION]
        | ProgramExpressions [EXPRESSION]
        | ProgramExpression EXPRESSION

data NAME
        = Identifier String

data EXPRESSION
        = CallWithBlock EXPRESSION [EXPRESSION] EXPRESSION
        | Block [EXPRESSION]
        | BEGIN EXPRESSION
        | END EXPRESSION

        | When [EXPRESSION] EXPRESSION
        | Rescue [EXPRESSION] EXPRESSION

        | Return [EXPRESSION]
        | Yield [EXPRESSION]
        | FunBlock EXPRESSION [EXPRESSION] EXPRESSION
        | If EXPRESSION EXPRESSION
        | IfElse EXPRESSION EXPRESSION EXPRESSION
        | While EXPRESSION EXPRESSION
        | Case EXPRESSION [EXPRESSION]
        | For [EXPRESSION] EXPRESSION EXPRESSION
        | Foreach EXPRESSION EXPRESSION
        | In EXPRESSION EXPRESSION
        | Begin EXPRESSION [EXPRESSION] (Maybe EXPRESSION)

        | Declaration DECLARATION

        -- variables (which should be another type -- everything's an EXPRESSION!)
        | Var String                     -- really just identifier and operation
        | VarName NAME                     -- really just identifier and operation
        | SelectName EXPRESSION NAME
        | Select EXPRESSION String
        | Tuple [EXPRESSION]
        | KeyValue EXPRESSION EXPRESSION
        | NilLit
        | Self

        | Skip
        | Seq EXPRESSION EXPRESSION

        | Defined EXPRESSION

        -- function
        | Call EXPRESSION [EXPRESSION]
        | Super

        -- argument
        | Assign EXPRESSION EXPRESSION
        | AssignName String EXPRESSION

        | ModAssign EXPRESSION EXPRESSION
        | DivAssign EXPRESSION EXPRESSION
        | SubAssign EXPRESSION EXPRESSION
        | AddAssign EXPRESSION EXPRESSION
        | OrAssign EXPRESSION EXPRESSION
        | XorAssign EXPRESSION EXPRESSION
        | AndAssign EXPRESSION EXPRESSION
        | RightShiftAssign EXPRESSION EXPRESSION
        | LeftShiftAssign EXPRESSION EXPRESSION
        | MulAssign EXPRESSION EXPRESSION
        | CondAndAssign EXPRESSION EXPRESSION
        | CondOrAssign EXPRESSION EXPRESSION
        | ExponentAssign EXPRESSION EXPRESSION

        | InclusiveRange EXPRESSION EXPRESSION
        | ExclusiveRange EXPRESSION EXPRESSION
        | Add EXPRESSION EXPRESSION
        | Sub EXPRESSION EXPRESSION
        | Mul EXPRESSION EXPRESSION
        | Div EXPRESSION EXPRESSION
        | Mod EXPRESSION EXPRESSION
        | Exponent EXPRESSION EXPRESSION
        | UnaryPlus EXPRESSION
        | UnaryMinus EXPRESSION
        | BitOr EXPRESSION EXPRESSION
        | BitXor EXPRESSION EXPRESSION
        | BitAnd EXPRESSION EXPRESSION
        | Iff EXPRESSION EXPRESSION
        | Greater EXPRESSION EXPRESSION
        | GreaterEqual EXPRESSION EXPRESSION
        | Less EXPRESSION EXPRESSION
        | LessEqual EXPRESSION EXPRESSION
        | Equal EXPRESSION EXPRESSION
        | StrictEqual EXPRESSION EXPRESSION
        | NotEqual EXPRESSION EXPRESSION
        | Matches EXPRESSION EXPRESSION
        | NotMatches EXPRESSION EXPRESSION
        | Not EXPRESSION
        | Complement EXPRESSION
        | LeftShift EXPRESSION EXPRESSION
        | RightShift EXPRESSION EXPRESSION
        | And EXPRESSION EXPRESSION
        | Or EXPRESSION EXPRESSION

        -- primary
        | ArrayRef EXPRESSION [EXPRESSION]
        | ListExp [EXPRESSION]
        | SetExp [EXPRESSION]
        | MapExp [EXPRESSION]

        -- literal
        | NumberLit double
        | IntLit int
        | Symbol String
        | StringLit String
        | Regexp String
        | BooleanLit boolean

data DECLARATION = 
           Class NAME (Maybe NAME) EXPRESSION
         | Module NAME EXPRESSION
         | Function EXPRESSION [NAME] EXPRESSION
         | Func NAME [NAME] EXPRESSION
         | FunctionDef String [NAME] EXPRESSION



token String IDENTIFIER
token double DOUBLE_LITERAL
token int INT_LITERAL
token String STRING_LITERAL
token String REGEXP_LITERAL
token String TOKEN_SEMI

template EXPRESSION -> EXPRESSION ::= expression:a { a };
template EXPRESSION -> [EXPRESSION] ::= "(" call_arguments:a ")" { a };

template EXPRESSION -> EXPRESSION ::= expression:a { a };
template EXPRESSION -> [EXPRESSION] ::= call_arguments:a { a };
template EXPRESSION -> EXPRESSION ::= compound_statement:a { a };

template DECLARATION -> [EXPRESSION] ::= do statements:a "end" { a };
template DECLARATION -> EXPRESSION ::= do compound_statement:a "end" { a };

-- template Object -> [A] ::= "(" object_list:a ")" { a };

-- EXPRESSION ::= ... ";" if last child not EXPRESSION
-- keyword at the beginning
-- no nonterminals juxtaposed

grammar

PROGRAM
goal          ::= program:a                                                                     { a }
                ;

PROGRAM
program       ::= statements:a                                  { ProgramExpressions a }
                | ";"                                           { ProgramExpressions [] }
                |                                               { ProgramExpressions [] }
                | declarations:a                                { ProgramDeclarations a }
                | ";"                                           { ProgramDeclarations [] }
                |                                               { ProgramDeclarations [] }
                | statements_exp:a                              { ProgramExpression a }
                | ";"                                           { ProgramExpression Skip }
                |                                               { ProgramExpression Skip }
                ;

[DECLARATION]
declarations  ::= declaration:a ";" declarations:as  { a:as }
                | declaration:a ";" { [a] }
                | declaration:a { [a] }
                ;

[EXPRESSION]
statements      ::= statement:a ";" statements:b { a:b }
                | statement:a ";" { [a] }
                | statement:a { [a] }
                ;

EXPRESSION
statements_exp ::= statement:a ";" statements_exp:b { Seq a b }
                | statement:a ";" { a }
                | statement:a { a }
                ;

EXPRESSION
compound_statement      ::= ";" statements:a            { Block a }
                          | ";" statements_exp:a            { a }
                          | statements:a            { Block a }
                          | statements_exp:a            { a }
                ;

EXPRESSION
statement          ::=
                  expression:a                                                { a }
                  -- expression:a "do" block_variable_opt:b compound_statement:c "end"     { CallWithBlock a b c }
                -- | expression:a "if" argument:c                                   { If c a }
                -- | expression:a "while" argument:c                                { While c a }
                -- | expression:a "unless" argument:c                               { If (Not c) a }
                -- | expression:a "until" argument:c                                { While (Not c) a }
                -- | "BEGIN" "{" compound_statement:a "}"                            { BEGIN a }
                -- | "END" "{" compound_statement:a "}"                              { END a }
                -- | "return" call_arguments:a                                       { Return a }
                -- | "yield" call_arguments:a                                        { Yield a }
                | "if" expression:a then compound_statement:b "end"                     { If a b }
                | "if" expression:a then compound_statement:b "end"                     { IfElse a b Skip }
                | "if" expression:a then compound_statement:b else:c "end"              { IfElse a b c }
                | "unless" expression:a then compound_statement:b "end"                 { If (Not a) b }
                | "unless" expression:a then compound_statement:b "end"                 { IfElse (Not a) b Skip }
                | "unless" expression:a then compound_statement:b "else" compound_statement:c "end"   { IfElse (Not a) b c }
                | "while" expression:a do compound_statement:b "end"                    { While a b }
                | "until" expression:a do compound_statement:b "end"                    { While (Not a) b }
                -- | "case" compound_statement:a whens:b "end"                       { Case a b }
                -- | "case" compound_statement:a whens:b "else" compound_statement:c "end"     { Case a (b ++ [c]) }
                -- | "for" block_variable:a "in" expression:b do compound_statement:c "end"     { For a b c }
                -- | "for" block_variable:a "in" expression:b do compound_statement:c "end"     { Foreach (In (Tuple a) b) c }
                -- | "begin" compound_statement:a rescues:b "end"                                            { Begin a b Nothing }
                -- | "begin" compound_statement:a rescues:b "else" compound_statement:c "end"                          { Begin a (b ++ [c]) Nothing }
                -- | "begin" compound_statement:a rescues:b "ensure" compound_statement:c "end"                        { Begin a b (Just c) }
                -- | "begin" compound_statement:a rescues:b "else" compound_statement:c "ensure" compound_statement:d "end"      { Begin a (b ++ [c]) (Just d) }
                -- | declaration:a { Declaration a }
                ;

EXPRESSION
expression    ::= command:c                                             { c  }
                | composition:a  { a }
                ;

EXPRESSION
composition    ::= composition:a "and" negation:b                                   { And a b }
                | composition:a "or" negation:b                                    { Or a b }
                | negation:a  { a }
                ;

EXPRESSION
negation      ::= "not" argument:a                                          { Not a }
                | argument:a                                                 { a }
                ;

EXPRESSION
command       ::= select:a call_arguments:as                                  { Call a as }
                ;

EXPRESSION
select ::=      variable:a  { a }
                | primary:a "." IDENTIFIER:b                             { Select a b }
                | primary:a "." identifier:b                             { SelectName a b }
                ;

EXPRESSION
call       ::=    select:a "("  ")"                                      { Call a [] }
                | select:a "(" call_arguments:as ")"                     { Call a as }
                ;

EXPRESSION
argument      ::= assignment:a { a }
                | conditional:a             { a }
                ;

EXPRESSION
assignment    ::= left_hand_side:a "=" conditional:b                                       { Assign a b }

                | IDENTIFIER:a "=" conditional:b                                       { AssignName a b }
                | IDENTIFIER:a "+=" conditional:b                                       { AssignName a (Add (Var a) b) }
                | IDENTIFIER:a "%=" conditional:b                                 { AssignName a (Mod (Var a) b) }
                | IDENTIFIER:a "/=" conditional:b                                 { AssignName a (Div (Var a) b) }
                | IDENTIFIER:a "-=" conditional:b                                 { AssignName a (Sub (Var a) b) }
                | IDENTIFIER:a "+=" conditional:b                                 { AssignName a (Add (Var a) b) }
                | IDENTIFIER:a "|=" conditional:b                                 { AssignName a (BitOr (Var a) b) }
                | IDENTIFIER:a "^=" conditional:b                                 { AssignName a (BitXor (Var a) b) }
                | IDENTIFIER:a "&=" conditional:b                                 { AssignName a (BitAnd (Var a) b) }
                | IDENTIFIER:a ">>=" conditional:b                                 { AssignName a (RightShift (Var a) b) }
                | IDENTIFIER:a "<<=" conditional:b                                 { AssignName a (LeftShift (Var a) b) }
                | IDENTIFIER:a "*=" conditional:b                                 { AssignName a (Mul (Var a) b) }
                | IDENTIFIER:a "&&=" conditional:b                                 { AssignName a (And (Var a) b) }
                | IDENTIFIER:a "||=" conditional:b                                 { AssignName a (Or (Var a) b) }
                | IDENTIFIER:a "**=" conditional:b                                 { AssignName a (Exponent (Var a) b) }

                | left_hand_side:a "%=" conditional:b                                 { ModAssign a b }
                | left_hand_side:a "/=" conditional:b                                 { DivAssign a b }
                | left_hand_side:a "-=" conditional:b                                 { SubAssign a b }
                | left_hand_side:a "+=" conditional:b                                 { AddAssign a b }
                | left_hand_side:a "|=" conditional:b                                 { OrAssign a b }
                | left_hand_side:a "^=" conditional:b                                 { XorAssign a b }
                | left_hand_side:a "&=" conditional:b                                 { AndAssign a b }
                | left_hand_side:a ">>=" conditional:b                                 { RightShiftAssign a b }
                | left_hand_side:a "<<=" conditional:b                                 { LeftShiftAssign a b }
                | left_hand_side:a "*=" conditional:b                                 { MulAssign a b }
                | left_hand_side:a "&&=" conditional:b                                 { CondAndAssign a b }
                | left_hand_side:a "||=" conditional:b                                 { CondOrAssign a b }
                | left_hand_side:a "**=" conditional:b                                 { ExponentAssign a b }

                | left_hand_sides:a "=" arguments:b                                     { Assign (Tuple a) (Tuple b) }
                ;

EXPRESSION
conditional   ::= range:a { a }
        | range:a "?" conditional:b ":" conditional:c { IfElse a b c }
        ;


EXPRESSION
range        ::= range:a ".." cond_or:b                                      { InclusiveRange a b }
                | range:a "..." cond_or:b                                     { ExclusiveRange a b }
                | cond_or:a { a }
                ;

EXPRESSION
cond_or ::= cond_or:a "||" cond_and:b   { Or a b }
        | cond_and:a  { a }
        ;

EXPRESSION
cond_and ::= cond_and:a "&&" equality:b   { And a b }
        | equality:a       { a }
        ;

EXPRESSION
equality ::= equality:a "<=>" relative:b   { Iff a b }
                | equality:a "==" relative:b  { Equal a b } 
                | equality:a "===" relative:b  { StrictEqual a b } 
                | equality:a "!=" relative:b  { NotEqual a b }
                | equality:a "!=" relative:b  { Not (Equal a b) }
                | equality:a "=~" relative:b   { Matches a b }
                | equality:a "!~" relative:b  { NotMatches a b }
                | equality:a "!~" relative:b  { Not (Matches a b) }
                | relative:a { a }
                ;

EXPRESSION
relative ::= relative:a "<=" bit_or:b   { LessEqual a b }
           | relative:a "<" bit_or:b   { Less a b }
           | relative:a ">=" bit_or:b   { GreaterEqual a b }
           | relative:a ">" bit_or:b   { Greater a b }
           | bit_or:a { a }
        ;

EXPRESSION
bit_or   ::= 
                  bit_or:a "|" bit_and:b                                       { BitOr a b }
                | bit_or:a "^" bit_and:b                                       { BitXor a b }
                | bit_and:a { a }
                ;

EXPRESSION
bit_and   ::= 
                 bit_and:a "&" shift:b                                       { BitAnd a b }
                | shift:a { a }
                ;

EXPRESSION
shift   ::= 
                  shift:a "<<" add:b                                       { BitAnd a b }
                | shift:a ">>" add:b                                       { BitAnd a b }
                | add:a { a }
                ;


EXPRESSION
add           ::= add:a "+" mul:b                                       { Add a b }
                | add:a "-" mul:b                                       { Sub a b }
                | mul:a { a }
                ;

EXPRESSION
mul           ::= mul:a "*" unary:b                                       { Mul a b }
                | mul:a "/" unary:b                                       { Div a b }
                | mul:a "%" unary:b                                       { Mod a b }
                | unary:a { a }
                ;

EXPRESSION
unary
              ::= 
                  "+" pow:a                                             { UnaryPlus a }
                | "+" pow:a                                             { Add (IntLit 0) a }
                | "-" pow:a                                             { UnaryMinus a }
                | "-" pow:a                                             { Sub (IntLit 0) a }
                | "!" pow:a                                             { Not a }
                | "~" pow:a                                             { Complement a }
                | pow:a { a }
                ;

EXPRESSION
pow           ::= primary:a "**" pow:b                                      { Exponent a b }
                | primary:a { a }
                ;

EXPRESSION
primary       ::= "(" compound_statement:a ")"                                    { a }
                | literal:a                                             { a }
                | select:a                                            { a }
                | primary:a "[" "]"                                     { ArrayRef a [] }
                | primary:a "[" arguments:b "]"                         { ArrayRef a b }
                | "[" "]"                                               { ListExp [] }
                | "[" arguments:a "]"                                   { ListExp a }
                | "[" arguments:a "," "]"                               { ListExp a }
                | "{" "}"                                               { SetExp [] }
                | "{" arguments:a  "}"                                  { SetExp a }
                | "{" assocs:a  "}"                                     { MapExp a }
                | "{" arguments:a "," "}"                               { SetExp a }
                | "{" assocs:a "," "}"                                  { MapExp a }
                | call:a "{" block_variable_opt:b compound_statement:c "}"         { FunBlock a b c }
                | select:a "{" block_variable_opt:b compound_statement:c "}"         { FunBlock a b c }
                ;

DECLARATION
declaration ::=
                  "class" identifier:a compound_statement:b "end"                 { (Class a Nothing b) }
                | "class" identifier:a "<" identifier:s compound_statement:b "end"        { (Class a (Just s) b) }
                | "module" identifier:a compound_statement:b "end"                { (Module a b) }
                | "def" function_name:a argument_declaration:as compound_statement:b "end"             { (Func a as b) }
                | "def" function_name:a argument_declaration:as compound_statement:b "end"             { (Function (VarName a) as b) }
                | "def" singleton:a "." function_name:b argument_declaration:as compound_statement:c "end"     { (Function (SelectName a b) as c) }
                | "def" IDENTIFIER:a argument_declaration:as compound_statement:b "end"             { (FunctionDef a as b) }
                ;

EXPRESSION
rescue        ::= "rescue" arguments:as do compound_statement:b                        { Rescue as b }
                | "rescue" do compound_statement:b                                { Rescue [] b }
                ;

[EXPRESSION]
rescues       ::= rescue:a rescues:b                                    { a:b }
                |                                                       { [] }
                ;

[EXPRESSION]
whens         ::= when:a whens:b                                        { a:b }
                | when:a                                                { [a] }
                ;

EXPRESSION
when          ::= "when" arguments:a then compound_statement:b                    { When a b }
                ;

EXPRESSION
else          ::= "elsif" expression:a then compound_statement:b else:c                 { (IfElse a b c) }
                | "elsif" expression:a then compound_statement:b                        { (If a b) }
                | "else" compound_statement:a                                     { a }
                ;

void
then          ::= "then"                                                        { () }
                | ";" "then"                                                       { () }
                ;

void
do            ::= "do"                                                  { () }
                | ";" "do"                                                       { () }
                ;

[EXPRESSION]
block_variable     ::= left_hand_side:a                                                 { [a] }
                | left_hand_sides:a                                                { a }
                ;

[EXPRESSION]
block_variable_opt ::= "|" "|"                                               { [] }
                | "|" block_variable:a "|"                                   { a }
                |                                                       { [] }
                ;

-- don't include the case with just one LHS
[EXPRESSION]
left_hand_sides ::= left_hand_sides_item:a "," left_hand_sides:b                                      { a ++ b }
                  | left_hand_sides_item:a "," left_hand_sides_item:b                                { a ++ b }
                ;

[EXPRESSION]
left_hand_sides_item     ::= left_hand_side:a                                                 { [a] }
                | "(" left_hand_sides:a ")"                                        { a }
                ;

EXPRESSION
left_hand_side           ::= variable:a                                 { a }
                | primary:a "[" "]"                                     { ArrayRef a [] }
                | primary:a "[" arguments:b "]"                         { ArrayRef a b }
                | primary:a "." IDENTIFIER:b                            { Select a b }
                | primary:a "." identifier:b                            { SelectName a b }
                ;

[EXPRESSION]
call_arguments     ::= arguments:a                                                { a }
                | arguments:a "," assocs:b                           { a ++ b }
                | assocs:a                                      { a }
                ;

[EXPRESSION]
arguments          ::= argument:a "," arguments:b                                  { a:b }
                | argument:a { [a] }
                ;

[NAME]
argument_declaration       ::= "(" formals:a ")"                             { a }
                 | "(" ")"                                        { [] }
                | formals:a ";"                                { a }
                ;

[NAME]
formals ::= formal:a "," formals:b                { a:b }
                | formal:a                                     { [a] }
                ;

NAME
formal  ::= identifier:a { a }
                ;

EXPRESSION
singleton     ::= variable:a                                    { a }
                | "(" expression:a ")"                                { a }
                ;

[EXPRESSION]
assocs        ::= assoc:a "," assocs:b                          { a:b }
                | assoc:a                                       { [a] }
                ;

EXPRESSION
assoc         ::= argument:a "=>" argument:b                              { KeyValue a b }
                ;

EXPRESSION
variable      ::= IDENTIFIER:a                                     { VarName (Identifier a) }
                | "nil":a                                       { VarName (Identifier a) }
                | "self":a                                       { VarName (Identifier a) }
                | "super":a                                               { VarName (Identifier a) }
                | "nil"                                         { NilLit }
                | "self"                                        { Self }
                | "super"                                               { Super }
                | IDENTIFIER:a                                    { Var a }
                | "nil":a                                       { Var a }
                | "self":a                                       { Var a }
                | "super":a                                               { Var a }
                ;

EXPRESSION
literal       ::= DOUBLE_LITERAL:a                                      { NumberLit a }
                | INT_LITERAL:a                                     { IntLit a }
                | STRING_LITERAL:a                                      { StringLit a }
                | HERE_DOC:a                                    { StringLit a }
                | REGEXP:a                                      { Regexp a }
                | symbol:a                                      { a }
                | "true":a                                      { BooleanLit True }
                | "false":a                                      { BooleanLit False }
                ;

NAME
identifier ::= IDENTIFIER:a { Identifier a }
                ;

EXPRESSION
symbol ::=  ":" IDENTIFIER:a { Symbol a }
        ;

NAME
function_name ::= IDENTIFIER:a { Identifier a }
        | "..":a { Identifier a }
        | "|":a { Identifier a }
        | "^":a { Identifier a }
        | "&":a { Identifier a }
        | "<=>":a { Identifier a }
        | "==":a { Identifier a }
        | "===":a { Identifier a }
        | "=~":a { Identifier a }
        | ">":a { Identifier a }
        | "<":a { Identifier a }
        | "<=":a { Identifier a }
        | ">=":a { Identifier a }
        | "+":a { Identifier a }
        | "-":a { Identifier a }
        | "*":a { Identifier a }
        | "/":a { Identifier a }
        | "%":a { Identifier a }
        | "**":a { Identifier a }
        | "<<":a { Identifier a }
        | ">>":a { Identifier a }
        | "~":a { Identifier a }
        | "+@":a { Identifier a }
        | "-@":a { Identifier a }
        | "[]":a { Identifier a }
        | "[]=":a { Identifier a }
        ;



